# -*- coding: utf-8 -*-
"""MusicProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xp4zm-_Pnl1mKztnTeYM-JGV0-14iRWA
"""

import nltk
nltk.download('vader_lexicon')

pip install spotipy

pip install langdetect

pip install googletrans==4.0.0-rc1

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import requests
from nltk.sentiment import SentimentIntensityAnalyzer
from langdetect import detect
from googletrans import Translator

# Set your Spotify API credentials to access its database
client_id = '199aa02954754b04b3639bc0fe48efe6'
client_secret = 'a645c86ac3554dd9ac94aa09ba3bf353'

# Initialize Spotify client
client_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

###DEFINE FUNCTIONS###
# Function to get a song's lyrics from Spotify's database
def get_lyrics(artist, track):
    url = f"https://api.lyrics.ovh/v1/{artist}/{track}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data.get('lyrics')
    else:
        return None

# Function to translate lyrics to English, with the Googletrans library
def translate_to_english(text):
    translator = Translator()
    translated_text = translator.translate(text, dest='en')
    return translated_text.text

# Function to get audio features of a track, from Spotify's database
def get_audio_features(track_id):
    audio_features = sp.audio_features(track_id)
    return audio_features[0] if audio_features else None

###SEARCH DATABASE FOR SONGS###
# Ask user for the keyword they're looking for
keyword = input("Enter the keyword(s) you're looking for: ")

# Example: Search for tracks containing the specified keyword in their lyrics
results = sp.search(q=keyword, type='track', limit=15)  # Limiting to 15 results

# Filter out tracks whose lyrics contain the input keyword
filtered_tracks = []
for track in results['tracks']['items']:
    artist = track['artists'][0]['name']
    track_name = track['name']
    lyrics = get_lyrics(artist, track_name)
    if lyrics and keyword.lower() in lyrics.lower():
        filtered_tracks.append(track)

# Give an error message if there were no matches
if not filtered_tracks:
    print(f"There were no matches with the word(s) '{keyword}' in Spotify's database.")
else:
    # Display basic information about the tracks
    print("Here are the matching tracks:")
    for idx, track in enumerate(filtered_tracks):
        artist = track['artists'][0]['name']
        track_name = track['name']
        album = track['album']['name']
        print(f"{idx + 1}. '{track_name}' by {artist} from the album '{album}'")

    # Prompt the user to choose a track for detailed analysis
    choice = None
    while choice is None:
        try:
            user_input = int(input(f"Enter the number of the song you want the analysis for (1-{len(filtered_tracks)}): "))
            if 1 <= user_input <= len(filtered_tracks):
                choice = user_input - 1
            else:
                print(f"Invalid selection. Please enter a number between 1 and {len(filtered_tracks)}.")
        except ValueError:
            print("Invalid input. Please enter a number.")

    track = filtered_tracks[choice]
    artist = track['artists'][0]['name']
    track_name = track['name']
    popularity = track['popularity']  # Get popularity metric
    music_video = track['external_urls']['spotify']  # Get music video link
    release_date = track['album']['release_date']  # Get release date
    duration_ms = track['duration_ms']  # Get duration in milliseconds
    album_art = track['album']['images'][0]['url']  # Get URL of album art
    track_id = track['id']  # Get track ID

    # Get genre information from Spotify's databse
    genres = sp.artist(track['artists'][0]['id'])['genres']
    genre_str = ', '.join(genres) if genres else "Unknown"

    # Get audio features from Spotify's database
    audio_features = get_audio_features(track_id)
    danceability = audio_features['danceability'] if audio_features else "N/A"
    energy = audio_features['energy'] if audio_features else "N/A"
    tempo = audio_features['tempo'] if audio_features else "N/A"

    lyrics = get_lyrics(artist, track_name)

    ###LYRICS ANALYSIS###
    if lyrics:
        # Detect the language of the lyrics
        language = detect(lyrics)

        # Translate lyrics to English if the detected language isn't English
        if language != 'en':
            translated_lyrics = translate_to_english(lyrics)
        else:
            translated_lyrics = lyrics
        translated_lyrics = translated_lyrics.replace("Paroles de la chanson", "Lyrics of").replace("par", "by")

        # Count how many times the keyword appears in the song
        keyword_count = translated_lyrics.lower().count(keyword.lower())

        # Convert duration from milliseconds to minutes, seconds
        duration_minutes = duration_ms // 60000
        duration_seconds = (duration_ms % 60000) // 1000

        # Perform sentiment analysis using the NLTK library
        sia = SentimentIntensityAnalyzer()
        sentiment_score = sia.polarity_scores(translated_lyrics)
        sentiment = "Positive" if sentiment_score['compound'] > 0 else "Negative" if sentiment_score['compound'] < 0 else "Neutral"

        # Print relevant features
        print(f"\nDetailed Analysis for '{track_name}' by {artist}:")
        print(f"Track Name: {track_name}")  # prints track's name
        print(f"Artist(s): {', '.join([artist['name'] for artist in track['artists']])}")  # prints track's artists
        print(f"Genres: {genre_str}")  # Print genres associated with the track's artist(s)
        print(f"Album: {track['album']['name']} (Track {track['track_number']})")  # prints track number in the album
        print(f"Release Date: {release_date}")  # prints release date
        print(f"Duration: {duration_minutes} minutes {duration_seconds} seconds")  # Prints song duration
        print(f"Language: {language}")  # Print original language
        print(f"Number of times '{keyword}' is mentioned: {keyword_count}")  # prints amount of time the keyword is mentioned in the song
        print(f"Preview URL: {track['preview_url']}")  # Prints 29 second audio file preview
        print(f"Music Video: {music_video}")  # Print music video link to Spotify
        print(f"Popularity (out of 100): {popularity}")  # Print popularity metric
        print(f"Sentiment: {sentiment} (Score: {sentiment_score['compound']})")  # Print sentiment analysis result
        print(f"Audio Features: Danceability (out of 1): {danceability}, Energy: {energy}, Tempo (BPM): {tempo}")  # print different audio features
        print(translated_lyrics)  # Print lyrics in English
    else:
        print("Lyrics not found for the selected track.")

"""# Program Description
We have created a program that allows the user to find songs. In some instances, you may hear a song but only remember a sentence/ word of it. This code allows you to find that said song based on the word you remember and get various informations about it.

The program works in the following way:
1. the user is asked to search for keywords
2. We use a spotify database to search for songs that match these keywords and display a maximum of 15 songs with their album titles and artist names
3. Users are asked to give the number of the song they want the analysis for
4. For the chosen song, we give a popularity rating, a sentiment analysis (negative or positive), links to an 30 seconds extract, link to the spotify album page, audio features such as danceability, and tempo and we print the lyrics in English



"""

